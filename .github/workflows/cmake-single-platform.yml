name: Build Program

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - uses: actions/checkout@v4

    # Install Qt
    - name: Install Qt
      id: install_qt
      uses: jurplel/install-qt-action@v4.3.0
      with:
        version: '6.8.3'
        cache: 'true'

    # Configure CMake with install path
    - name: Configure CMake
      run: cmake -S . -B build \
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
        -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/app

    # Build project
    - name: Build
      run: cmake --build build --target all

    # Install project into app folder (creates bin/, lib/, etc.)
    - name: Install to app folder
      run: cmake --install build

    # Copy Qt libraries and plugins into app folder
    - name: Copy Qt libraries and plugins
      run: |
        mkdir -p app/lib app/plugins
        QT_PATH=${QT_ROOT_DIR}

        # Copy Qt shared libraries
        cp -r $QT_PATH/lib/* app/lib/

        # Copy Qt plugins (platforms, imageformats, etc.)
        cp -r $QT_PATH/plugins/* app/plugins/

        if [ -d "$QT_PATH/qml" ]; then
          cp -r $QT_PATH/qml app/qml
        fi

    # Package as AppImage
    - name: Qt to AppImage
      id: appimage
      uses: Kidev/Qt-AppImage@v0.0.8
      with:
        install_folder: '${{ github.workspace }}/app'
        app_name: 'linux-helper'
        comment: 'Install Helper for LMAOBOX'
        category: 'Utility'
        icon: 'icon.png'
        binary: 'bin/lbox-linux-install-helper'

    # Extract version from the Git tag
    - name: Get Version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    # Create and upload GitHub Pre-release
    - name: Create/Update GitHub Pre-release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: nightly
        name: "Nightly Build"
        prerelease: true
        overwrite_files: true
        files: ${{ steps.appimage.outputs.appimage }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
